<?php

/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management.
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class WorkFlowController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation postAddWorkflowStep
     *
     * Add a Workflow step.
     *
     *
     * @return Http response
     */
    public function postAddWorkflowStep()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postAddWorkflowStep');
        }
        $contentType = $input['contentType'];

        $addWorkflowStepV2Request = $input['addWorkflowStepV2Request'];


        return response('How about implementing postAddWorkflowStep as a post method ?');
    }
    /**
     * Operation postCancelFlow
     *
     * Cancel Flow.
     *
     *
     * @return Http response
     */
    public function postCancelFlow()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postCancelFlow');
        }
        $contentType = $input['contentType'];

        $cancelFlowRequest = $input['cancelFlowRequest'];


        return response('How about implementing postCancelFlow as a post method ?');
    }
    /**
     * Operation createWorkflow
     *
     * Create Workflow.
     *
     *
     * @return Http response
     */
    public function createWorkflow()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling createWorkflow');
        }
        $contentType = $input['contentType'];

        if (!isset($input['createWorkflowRequest'])) {
            throw new \InvalidArgumentException('Missing the required parameter $createWorkflowRequest when calling createWorkflow');
        }
        $createWorkflowRequest = $input['createWorkflowRequest'];


        return response('How about implementing createWorkflow as a post method ?');
    }
    /**
     * Operation postDeleteDoc
     *
     * Delete Document.
     *
     *
     * @return Http response
     */
    public function postDeleteDoc()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postDeleteDoc');
        }
        $contentType = $input['contentType'];

        $deleteDocRequest = $input['deleteDocRequest'];


        return response('How about implementing postDeleteDoc as a post method ?');
    }
    /**
     * Operation postDocPrepperAddField
     *
     * Document Prepper Add Fields.
     *
     *
     * @return Http response
     */
    public function postDocPrepperAddField()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postDocPrepperAddField');
        }
        $contentType = $input['contentType'];

        $docPrepperAddFieldsFlowIDRequest = $input['docPrepperAddFieldsFlowIDRequest'];


        return response('How about implementing postDocPrepperAddField as a post method ?');
    }
    /**
     * Operation postDocPrepperAdvancedFields
     *
     * Document Prepper Add Advanced Fields.
     *
     *
     * @return Http response
     */
    public function postDocPrepperAdvancedFields()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postDocPrepperAdvancedFields');
        }
        $contentType = $input['contentType'];

        $docPrepperAddAdvancedFieldsRequest = $input['docPrepperAddAdvancedFieldsRequest'];


        return response('How about implementing postDocPrepperAdvancedFields as a post method ?');
    }
    /**
     * Operation postFullWorkflow
     *
     * FullWorkflow.
     *
     *
     * @return Http response
     */
    public function postFullWorkflow()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postFullWorkflow');
        }
        $contentType = $input['contentType'];

        $fullWorkflowRequest = $input['fullWorkflowRequest'];


        return response('How about implementing postFullWorkflow as a post method ?');
    }
    /**
     * Operation getDocument
     *
     * Get Document.
     *
     *
     * @return Http response
     */
    public function getDocument()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling getDocument');
        }
        $contentType = $input['contentType'];

        $getDocumentRequest = $input['getDocumentRequest'];


        return response('How about implementing getDocument as a post method ?');
    }
    /**
     * Operation postGetDocStatus
     *
     * Get Document Status.
     *
     *
     * @return Http response
     */
    public function postGetDocStatus()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postGetDocStatus');
        }
        $contentType = $input['contentType'];

        $getDocStatusRequest = $input['getDocStatusRequest'];


        return response('How about implementing postGetDocStatus as a post method ?');
    }
    /**
     * Operation postInitiateFlow
     *
     * Initiate Flow.
     *
     *
     * @return Http response
     */
    public function postInitiateFlow()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postInitiateFlow');
        }
        $contentType = $input['contentType'];

        $initiateFlowRequest = $input['initiateFlowRequest'];


        return response('How about implementing postInitiateFlow as a post method ?');
    }
    /**
     * Operation postInitiateFlowNoEmail
     *
     * Initiate Flow No Email.
     *
     *
     * @return Http response
     */
    public function postInitiateFlowNoEmail()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postInitiateFlowNoEmail');
        }
        $contentType = $input['contentType'];

        $initiateFlowNoEmailRequest = $input['initiateFlowNoEmailRequest'];


        return response('How about implementing postInitiateFlowNoEmail as a post method ?');
    }
    /**
     * Operation postInitiateFlowNoInitialEmail
     *
     * Initiate Flow No Initial Email.
     *
     *
     * @return Http response
     */
    public function postInitiateFlowNoInitialEmail()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postInitiateFlowNoInitialEmail');
        }
        $contentType = $input['contentType'];

        $initiateFlowNoInitialEmailRequest = $input['initiateFlowNoInitialEmailRequest'];


        return response('How about implementing postInitiateFlowNoInitialEmail as a post method ?');
    }
    /**
     * Operation postWorkflowSign
     *
     * Workflow Sign.
     *
     *
     * @return Http response
     */
    public function postWorkflowSign()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postWorkflowSign');
        }
        $contentType = $input['contentType'];

        $workflowSignRequest = $input['workflowSignRequest'];


        return response('How about implementing postWorkflowSign as a post method ?');
    }
}
