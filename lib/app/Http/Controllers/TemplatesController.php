<?php

/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management.
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class TemplatesController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation postApplyPrepperTemplate
     *
     * Apply a Prepper template.
     *
     *
     * @return Http response
     */
    public function postApplyPrepperTemplate()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postApplyPrepperTemplate');
        }
        $contentType = $input['contentType'];

        $applyPrepperTemplateRequest = $input['applyPrepperTemplateRequest'];


        return response('How about implementing postApplyPrepperTemplate as a post method ?');
    }
    /**
     * Operation postGetDocumentTagFieldBoxPosition
     *
     * Get Document Tag Field Box Position.
     *
     *
     * @return Http response
     */
    public function postGetDocumentTagFieldBoxPosition()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postGetDocumentTagFieldBoxPosition');
        }
        $contentType = $input['contentType'];

        $getDocumentTagFieldBoxPositionRequest = $input['getDocumentTagFieldBoxPositionRequest'];


        return response('How about implementing postGetDocumentTagFieldBoxPosition as a post method ?');
    }
    /**
     * Operation postGetDocumentTagFieldPosition
     *
     * Get Document Tag Field Position.
     *
     *
     * @return Http response
     */
    public function postGetDocumentTagFieldPosition()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postGetDocumentTagFieldPosition');
        }
        $contentType = $input['contentType'];

        $getDocumentTagFieldPositionRequest = $input['getDocumentTagFieldPositionRequest'];


        return response('How about implementing postGetDocumentTagFieldPosition as a post method ?');
    }
    /**
     * Operation postGetPrepperTemplate
     *
     * Get Prepper Template.
     *
     *
     * @return Http response
     */
    public function postGetPrepperTemplate()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postGetPrepperTemplate');
        }
        $contentType = $input['contentType'];

        $getPrepperTemplateRequest = $input['getPrepperTemplateRequest'];


        return response('How about implementing postGetPrepperTemplate as a post method ?');
    }
    /**
     * Operation postGetPrepperTemplateList
     *
     * Get Prepper Template List.
     *
     *
     * @return Http response
     */
    public function postGetPrepperTemplateList()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling postGetPrepperTemplateList');
        }
        $contentType = $input['contentType'];

        $getPrepperTemplateListRequest = $input['getPrepperTemplateListRequest'];


        return response('How about implementing postGetPrepperTemplateList as a post method ?');
    }
}
