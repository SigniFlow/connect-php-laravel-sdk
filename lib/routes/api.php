<?php

/**
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management.
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/**
 * post postGetAuditDocument
 * Summary: Get Audit Document
 * Notes: #### Used to get an audit document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetAuditDocument', 'AuditsController@postGetAuditDocument');
/**
 * post postGetDocumentAudit
 * Summary: Get Document Audit
 * Notes: #### Used to get the audit information from a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetDocumentAudit', 'AuditsController@postGetDocumentAudit');
/**
 * post login
 * Summary: Login
 * Notes: #### Generates a API Token for the User
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/Login', 'AuthenticationController@login');
/**
 * post postLogout
 * Summary: Logout
 * Notes: #### Used to log out a user from SigniFlow.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/Logout', 'AuthenticationController@postLogout');
/**
 * post postTokenExtend
 * Summary: Token Extend
 * Notes: #### Used to extend the period of time in which the session token is valid.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/TokenExtend', 'AuthenticationController@postTokenExtend');
/**
 * post postTokenValidate
 * Summary: Token Validate
 * Notes: #### Used to validate the user&#39;s session token.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/TokenValidate', 'AuthenticationController@postTokenValidate');
/**
 * post postCreatePortfolio
 * Summary: Create Portfolio
 * Notes: #### Used to create a portfolio to group documents.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/CreatePortfolio', 'PortfoliosController@postCreatePortfolio');
/**
 * post postDownloadPortfolio
 * Summary: Download Portfolio
 * Notes: #### Used to return a string that is then used to download a portfolio.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/DownloadPortfolio', 'PortfoliosController@postDownloadPortfolio');
/**
 * post postLinkToPortfolio
 * Summary: Link To Portfolio
 * Notes: #### Used to get the url link to a portfolio.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/LinkToPortfolio', 'PortfoliosController@postLinkToPortfolio');
/**
 * post postSetDocumentOrder
 * Summary: Set Document Order
 * Notes: #### Used to set the order of documents that needs to be signed.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/SetDocumentOrder', 'PortfoliosController@postSetDocumentOrder');
/**
 * post postSharePortfolio
 * Summary: Share Portfolio
 * Notes: #### Used when a user wants to share a portfolio with someone else.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/SharePortfolio', 'PortfoliosController@postSharePortfolio');
/**
 * post postSharePortfolioNoEmail
 * Summary: Share Portfolio No Email
 * Notes: #### Used when a user wants to share a portfolio without sending out an email.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/SharePortfolio_No_Email', 'PortfoliosController@postSharePortfolioNoEmail');
/**
 * post postMultipleSignersSigningCeremony
 * Summary: Multiple Signers Signing Ceremony
 * Notes: #### Used when there are multiple signers on a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/MultipleSignersSigningCeremony', 'SigningCeremonyController@postMultipleSignersSigningCeremony');
/**
 * post postSigningCeremonyV2
 * Summary: Signing Ceremony V2
 * Notes: #### Used to initiate the signing process of a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/SigningCeremonyV2', 'SigningCeremonyController@postSigningCeremonyV2');
/**
 * post postApplyPrepperTemplate
 * Summary: Apply a Prepper template
 * Notes: #### Used when applying a templaet to a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/ApplyPrepperTemplate', 'TemplatesController@postApplyPrepperTemplate');
/**
 * post postGetDocumentTagFieldBoxPosition
 * Summary: Get Document Tag Field Box Position
 * Notes: #### Used to get the tag field box position on a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetDocumentTagFieldBoxPosition', 'TemplatesController@postGetDocumentTagFieldBoxPosition');
/**
 * post postGetDocumentTagFieldPosition
 * Summary: Get Document Tag Field Position
 * Notes: #### Used to get the tag position on a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetDocumentTagFieldPosition', 'TemplatesController@postGetDocumentTagFieldPosition');
/**
 * post postGetPrepperTemplate
 * Summary: Get Prepper Template
 * Notes: #### Used to get a document template.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetPrepperTemplate', 'TemplatesController@postGetPrepperTemplate');
/**
 * post postGetPrepperTemplateList
 * Summary: Get Prepper Template List
 * Notes: #### Used to get a list of document templates.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetPrepperTemplateList', 'TemplatesController@postGetPrepperTemplateList');
/**
 * post postGetDocLink
 * Summary: Get Document Link
 * Notes: #### Used to get the document link that will be used to sign a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetDocLink', 'ViewersController@postGetDocLink');
/**
 * post postGetDocumentPrepperLink
 * Summary: Get Document Prepper Link
 * Notes: #### Used to get a document prepper link (url).
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetDocumentPrepperLink', 'ViewersController@postGetDocumentPrepperLink');
/**
 * post postAddWorkflowStep
 * Summary: Add a Workflow step
 * Notes: #### Used to add a step to a document Workflow process.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/AddWorkflowStepV2', 'WorkFlowController@postAddWorkflowStep');
/**
 * post postCancelFlow
 * Summary: Cancel Flow
 * Notes: #### Used to cancel a document workflow.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/CancelFlow', 'WorkFlowController@postCancelFlow');
/**
 * post createWorkflow
 * Summary: Create Workflow
 * Notes: #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/CreateWorkflow', 'WorkFlowController@createWorkflow');
/**
 * post postDeleteDoc
 * Summary: Delete Document
 * Notes: #### This is used to delete a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/DeleteDoc', 'WorkFlowController@postDeleteDoc');
/**
 * post postDocPrepperAddField
 * Summary: Document Prepper Add Fields
 * Notes: #### Used to add fields to a document using the user&#39;s FlowID.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/DocPrepperAddFieldsFlowID', 'WorkFlowController@postDocPrepperAddField');
/**
 * post postDocPrepperAdvancedFields
 * Summary: Document Prepper Add Advanced Fields
 * Notes: #### Used to add advanced fields to a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/DocPrepperAdvancedFields', 'WorkFlowController@postDocPrepperAdvancedFields');
/**
 * post postFullWorkflow
 * Summary: FullWorkflow
 * Notes: #### Used to create a fullworkflow for a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/FullWorkflow', 'WorkFlowController@postFullWorkflow');
/**
 * post getDocument
 * Summary: Get Document
 * Notes: #### Used to download a document from SigniFlow.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetDoc', 'WorkFlowController@getDocument');
/**
 * post postGetDocStatus
 * Summary: Get Document Status
 * Notes: #### Used to get the status of the document ex. pending/completed/rejected.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/GetDocStatus', 'WorkFlowController@postGetDocStatus');
/**
 * post postInitiateFlow
 * Summary: Initiate Flow
 * Notes: #### Used to initiate aworkflow of a document.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/InitiateFlow', 'WorkFlowController@postInitiateFlow');
/**
 * post postInitiateFlowNoEmail
 * Summary: Initiate Flow No Email
 * Notes: #### Used to initiate a workflow without sending out emails.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/InitiateFlow_No_Email', 'WorkFlowController@postInitiateFlowNoEmail');
/**
 * post postInitiateFlowNoInitialEmail
 * Summary: Initiate Flow No Initial Email
 * Notes: #### Used to initiate a document workflow without an initial email being sent to the user.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/InitiateFlow_No_Initial_Email', 'WorkFlowController@postInitiateFlowNoInitialEmail');
/**
 * post postWorkflowSign
 * Summary: Workflow Sign
 * Notes: #### Used to send a request to a user to sign a document workflow.
 * Output-Formats: [application/json]
 */
Route::post('/API/SignFlowAPIServiceRest.svc/WorkflowSign', 'WorkFlowController@postWorkflowSign');

Route::middleware('auth:api')->get('/user', function (Request $request) {
    return $request->user();
});
